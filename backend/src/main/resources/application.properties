spring.application.name=backend
server.port=8080

# SMTP \uC11C\uBC84 \uC124\uC815 (Gmail)
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=fillution1@gmail.com
spring.mail.password=yxtdfivpiakvnffd

# SMTP \uC778\uC99D \uBC0F \uBCF4\uC548 \uC124\uC815
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true

# SMTP \uC5F0\uACB0 \uD0C0\uC784\uC544\uC6C3 \uC124\uC815 (\uB2E8\uC704: \uBC00\uB9AC\uCD08)
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000

spring.datasource.driver-class-name=net.sf.log4jdbc.sql.jdbcapi.DriverSpy
spring.datasource.url=jdbc:log4jdbc:mariadb://localhost:3306/orbit2?serverTimezone=UTC&characterEncoding=UTF-8
#spring.datasource.url=jdbc:log4jdbc:mariadb://shop-database.c5kusk0eqd5l.ap-northeast-2.rds.amazonaws.com:3306/shop_social?serverTimezone=UTC&characterEncoding=UTF-8
spring.datasource.username=root
spring.datasource.password=1234

# HikariCP\uB294 \uCD5C\uB300 10\uAC1C\uC758 \uB370\uC774\uD130\uBCA0\uC774\uC2A4 \uC5F0\uACB0\uC744 \uAD00\uB9AC
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000
spring.datasource.hikari.validation-timeout=5000

#### JPA
#Hibernate\uB294 MariaDB \uB370\uC774\uD130\uBCA0\uC774\uC2A4\uC5D0 \uCD5C\uC801\uD654\uB41C \uB370\uC774\uD130\uBCA0\uC774\uC2A4 \uC791\uC5C5\uC744 \uC218\uD589
spring.jpa.database-platform=org.hibernate.dialect.MariaDBDialect
# Entity create mode
spring.jpa.hibernate.ddl-auto=update

# Hibernate sql show
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.use_sql_comments=false
logging.level.org.hibernate.SQL=off
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=off

# log display format
logging.pattern.level=%highlight(%-5level)
spring.output.ansi.enabled=ALWAYS
log display format
# \uB85C\uADF8 \uD328\uD134 \uC124\uC815[\uC218\uC815]
# spring.output.ansi.enabled=ALWAYS
#logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %msg%n%ex

# SQL debug
# SQL
logging.level.jdbc.resultset=error
logging.level.jdbc.audit=info

logging.level.jdbc.sqlonly=OFF
logging.level.jdbc.sqltiming=INFO

# \uC2DC\uD050\uB9AC\uD2F0 \uB85C\uADF8
logging.level.org.springframework.security=DEBUG

spring.servlet.multipart.enabled=true
#spring.servlet.multipart.location=C:\\upload

# \uD504\uB85C\uC81D\uD2B8 \uB0B4\uBD80\uC5D0 \uB9CC\uB4E0 upload \uD3F4\uB354\uC5D0 \uD30C\uC77C\uC774 \uC5C5\uB85C\uB4DC \uB428.
spring.servlet.multipart.location=upload/

# \uD074\uB77C\uC6B0\uB4DC\uD0C0\uC785 \uBC30\uD3EC\uC2DC \uC5C5\uB85C\uB4DC \uD3F4\uB354
#spring.servlet.multipart.location=/app/build/libs/upload

## \uD30C\uC77C \uC5C5\uB85C\uB4DC \uACBD\uB85C
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=30MB
# uploadPath=C:/orbit_files/uploads/


# judy
#itemImgLocation=/Users/judykim/Documents/uploads/product
uploadPath=/Users/judykim/Documents/uploads/product

# 2. AWS File Upload Path
#com.javalab.boot.upload.path=/home/ec2-user/shop/upload
# 3. \uD074\uB77C\uC6B0\uB4DC \uBC30\uD3EC\uC2DC \uC5C5\uB85C\uB4DC \uACBD\uB85C \uBCC0\uC218
#com.javalab.boot.upload.path=/app/build/libs/upload

# \uC5B4\uD50C\uB9AC\uCF00\uC774\uC158\uC758 url \uC694\uCCAD\uACFC \uB9E4\uD551\uB418\uC5B4 \uC788\uB294 \uD578\uB4E4\uB7EC \uC815\uBCF4 display
logging.level.org.springframework.web=DEBUG
# logging.level.org.springframework.security=trace
logging.level.org.springframework.web.servlet.mvc.method.annotation=TRACE

# \uAE30\uBCF8 batch size \uC124\uC815, \uC8FC\uBB38\uC774 5\uAC74\uC774\uBA74 \uC77C\uBC18\uC801\uC73C\uB85C 5\uBC88\uC758 \uC8FC\uBB38 \uC544\uC774\uD15C\uC5D0 \uB300\uD55C \uC870\uD68C \uCFFC\uB9AC\uAC00 \uBC1C\uC0DD\uD569\uB2C8\uB2E4.
# \uC774\uB54C batch size\uB97C 1000\uC73C\uB85C \uC124\uC815\uD558\uBA74 5\uBC88\uC758 \uC870\uD68C \uCFFC\uB9AC \uB300\uC2E0 1\uBC88\uC758 \uC870\uD68C \uCFFC\uB9AC\uB85C \uCC98\uB9AC\uD560 \uC218 \uC788\uC2B5\uB2C8\uB2E4.
# \uC774\uB807\uAC8C \uC124\uC815\uD558\uBA74 \uC131\uB2A5\uC774 \uD5A5\uC0C1\uB429\uB2C8\uB2E4. \uC608\uB97C\uB4E4\uBA74 in \uCFFC\uB9AC\uB85C \uCC98\uB9AC\uB429\uB2C8\uB2E4. in (1,2,3,4,5)
spring.jpa.properties.hibernate.default_batch_fetch_size=10

# Redis \uC124\uC815
# Redis \uC11C\uBC84\uC758 \uD638\uC2A4\uD2B8 \uC8FC\uC18C (\uB85C\uCEEC\uC5D0\uC11C \uC2E4\uD589 \uC911\uC778 Redis \uC0AC\uC6A9)
spring.data.redis.host=localhost
# Redis \uC11C\uBC84\uC758 \uD3EC\uD2B8 \uBC88\uD638 (\uAE30\uBCF8\uAC12: 6379)
spring.data.redis.port=6379
# Redis \uC11C\uBC84 \uC811\uC18D \uC2DC \uD544\uC694\uD55C \uBE44\uBC00\uBC88\uD638 (\uC124\uC815\uB418\uC9C0 \uC54A\uC740 \uACBD\uC6B0 \uBE48 \uAC12)
spring.data.redis.password=ezen12345
# Redis \uC5F0\uACB0 \uD0C0\uC784\uC544\uC6C3 (\uBC00\uB9AC\uCD08 \uB2E8\uC704, 6000ms = 6\uCD08)
spring.data.redis.timeout=6000


## kakao social login \uC0AC\uC6A9\uC790\uB97C \uCE74\uCE74\uC624 \uC778\uC99D \uC11C\uBC84\uB85C \uB9AC\uB2E4\uC774\uB809\uD2B8\uD558\uAE30 \uC704\uD55C \uCD08\uAE30 \uB2E8\uACC4\uB97C \uAD6C\uC131 ##
# 1. \uC0AC\uC6A9\uC790\uAC00 \uC6B0\uB9AC \uB85C\uADF8\uC778 \uD398\uC774\uC9C0\uC5D0\uC11C <a href="/oauth2/authorization/kakao">KAKAO</a> \uD074\uB9AD
# 2. \uC2A4\uD504\uB9C1 \uC2DC\uD050\uB9AC\uD2F0 OAuth2 \uAC00 1.\uBC88 \uC694\uCCAD\uC744 \uAC00\uB85C\uCC44\uC11C \uC0AC\uC6A9\uC790\uB97C \uCE74\uCE74\uC624\uC758 \uC778\uC99D URI\uB85C \uC124\uC815\uB41C
#   https://kauth.kakao.com/oauth/authorize\uB85C \uB9AC\uB514\uB809\uD2B8 \uC2DC\uD0A8\uB2E4.
# 3. \uCE74\uCE74\uC624\uB294 \uB2E4\uC2DC \uC0AC\uC6A9\uC790\uC758 \uCE74\uCE74\uC624 \uC18C\uC15C \uB85C\uADF8\uC778 \uC778\uC99D \uC5EC\uBD80\uC5D0 \uB530\uB77C\uC11C \uC0AC\uC6A9\uC790\uB97C
#    https://accounts.kakao.com/login \uD398\uC774\uC9C0\uB85C \uB9AC\uB514\uB809\uD2B8 \uC2DC\uD0A8\uB2E4. \uB9CC\uC57D \uCE74\uCE74\uC624 \uC18C\uC15C\uB85C\uADF8\uC778 \uC778\uC99D\uC774
#    \uC774\uBBF8 \uC788\uB294 \uACBD\uC6B0\uC5D0\uB294 \uBC14\uB85C \uC778\uAC00\uCF54\uB4DC\uB97C \uC6B0\uB9AC \uC11C\uBC84\uB85C \uC804\uB2EC\uD55C\uB2E4.
# 4. \uC0AC\uC6A9\uC790\uAC00 \uCE74\uCE74\uC624 \uC18C\uC15C\uB85C\uADF8\uC778 \uD654\uBA74\uC5D0\uC11C \uC544\uC774\uB514\uC640 \uBE44\uBC00\uBC88\uD638\uB97C \uC785\uB825\uD558\uACE0 \uB85C\uADF8\uC778 \uBC84\uD2BC\uC744 \uB204\uB974\uBA74
#   \uC6B0\uB9AC \uC11C\uBC84\uC640 \uCE74\uCE74\uC624 \uC11C\uBC84\uAC04\uC758 \uC778\uC99D \uC808\uCC28\uAC00 \uC2DC\uC791\uB41C\uB2E4.
# 4.1. \uCE74\uCE74\uC624 \uC778\uC99D \uC11C\uBC84\uB294 \uC6B0\uB9AC \uC571\uC5D0 \uC124\uC815\uD55C client-id\uB97C \uD655\uC778\uD558\uACE0 \uC778\uAC00\uCF54\uB4DC\uB97C \uC804\uB2EC\uD574\uC900\uB2E4.
#   \uC778\uAC00\uCF54\uB4DC\uB294 \uC6B0\uB9AC\uAC00 \uC124\uC815\uD574\uB193\uC740 Redirect Url(http://localhost:8080/login/oauth2/code/kakao)\uB85C \uC804\uB2EC\uB41C\uB2E4.
# 4.2. 4.1.\uC5D0\uC11C \uBC1B\uC740 \uC778\uAC00\uCF54\uB4DC\uC640 \uC6B0\uB9AC\uAC00 \uC124\uC815\uD574\uB193\uC740 client-secret \uD0A4\uB97C \uCE74\uCE74\uC624\uC758 \uC778\uC99D\uC11C\uBC84\uC778
#   https://kauth.kakao.com/oauth/token \uC5D0 \uC561\uC138\uC2A4 \uD1A0\uD070\uC744 \uC694\uCCAD\uD558\uACE0 \uCE74\uCE74\uC624 \uC778\uC99D \uC11C\uBC84\uAC00 \uC561\uC138\uC2A4 \uD1A0\uD070\uC744 \uBC18\uD658.
# 5. Spring Security\uAC00 \uC561\uC138\uC2A4 \uD1A0\uD070\uC744 \uC0AC\uC6A9\uD574 https://kapi.kakao.com/v2/user/me\uC5D0\uC11C \uC0AC\uC6A9\uC790 \uC815\uBCF4\uB97C \uC694\uCCAD.
# 6. \uC0AC\uC6A9\uC790 \uC815\uBCF4\uB97C \uAC00\uC838\uC640 \uC778\uC99D \uAC1D\uCCB4 \uC0DD\uC131 \uBC0F \uC2A4\uD504\uB9C1 \uCEE8\uD14D\uC2A4\uD2B8\uC5D0 \uC800\uC7A5.
# 7. \uC0AC\uC6A9\uC790\uAC00 \uB85C\uADF8\uC778 \uD6C4 \uB9AC\uB514\uB809\uC158 \uC124\uC815\uC5D0 \uB530\uB77C \uC801\uC808\uD55C \uD398\uC774\uC9C0\uB85C \uC774\uB3D9
# \uCE74\uCE74\uC624\uB294 \uC2A4\uD504\uB9C1 \uC2DC\uD050\uB9AC\uD2F0\uC5D0\uAC8C \uC778\uC99D \uCF54\uB4DC\uB97C \uC804\uB2EC\uD55C\uB2E4.
#spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
#spring.security.oauth2.client.provider.kakao.user-name-attribute=id
#spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
#spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me
#spring.security.oauth2.client.registration.kakao.client-name=kakao
#spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
#
### \uCE74\uCE74\uC624 \uC18C\uC15C \uB85C\uADF8\uC778
## 1. \uC18C\uC15C \uB85C\uADF8\uC778 \uB85C\uCEEC \uC11C\uBC84 - \uB85C\uADF8\uC778 \uC131\uACF5\uD6C4 "\uC778\uAC00\uCF54\uB4DC"\uAC00 \uB9AC\uB514\uB809\uC158\uB420 \uC8FC\uC18C(\uCE74\uCE74\uC624 \uC18C\uC15C \uB85C\uADF8\uC778\uC744 \uB85C\uCEEC\uC5D0\uC11C \uC0AC\uC6A9)
#spring.security.oauth2.client.registration.kakao.redirect_uri=http://localhost:8080/login/oauth2/code/kakao
## 2. \uC18C\uC15C \uB85C\uADF8\uC778(\uD074\uB77C\uC6B0\uB4DC\uD0C0\uC785 \uBC30\uD3EC\uC2DC \uC0AC\uC6A9)
##spring.security.oauth2.client.registration.kakao.redirect_uri=https://port-0-chap10-shopping-static-7xwyjq992lliwmu004.sel4.cloudtype.app/login/oauth2/code/kakao
##3. \uC18C\uC15C \uB85C\uADF8\uC778(AWS \uBC30\uD3EC\uC2DC \uC0AC\uC6A9)
##spring.security.oauth2.client.registration.kakao.redirect_uri=http://ec2-54-180-123-29.ap-northeast-2.compute.amazonaws.com:8080/login/oauth2/code/kakao

# REST API \uD0A4(\uC778\uAC00 \uCF54\uB4DC \uBC1C\uAE09\uC2DC \uD544\uC694)
spring.security.oauth2.client.registration.kakao.client-id=f57be72d3c49af75d43b0fefd1ce8235
# \uC778\uAC00\uCF54\uB4DC\uC640 \uC774 \uBE44\uBC00\uD0A4\uB97C \uC774\uC639\uD574\uC11C \uC561\uC138\uC2A4 \uD1A0\uD070\uC744 \uBC1C\uAE09\uBC1B\uB294\uB2E4. \uC561\uC138\uC2A4 \uD1A0\uD070\uC774 \uC788\uC5B4\uC57C \uCE74\uCE74\uC624 \uC0AC\uC6A9\uC790 \uC815\uBCF4 \uC870\uD68C \uAC00\uB2A5
spring.security.oauth2.client.registration.kakao.client-secret=hn6bBKP7z0MjGFWudXTeHWLbgbMZPc9s
spring.security.oauth2.client.registration.kakao.client-authentication-method=client_secret_post
spring.security.oauth2.client.registration.kakao.scope=profile_nickname,account_email

# JWT \uC124\uC815
jwt.issuer=ajufresh@gmail.com
# jwt \uB9CC\uB4E4\uACE0/\uD30C\uC2F1\uD560\uB54C \uC0AC\uC6A9\uD560 \uD0A4\uB85C \uC0AC\uC6A9\uC790\uAC00 \uC784\uC758\uB85C \uC124\uC815\uD560 \uC218 \uC788\uB2E4. \uC774 \uD0A4\uB97C \uC124\uC815\uD568\uC73C\uB85C \uC778\uD574\uC11C \uC554/\uBCF5\uD638\uD654\uC2DC \uD574\uD0B9\uC744 \uBC29\uC9C0\uD560 \uC218 \uC788\uB2E4.
jwt.secret_key=study-springboot
#jwt.expiration_time=86400000


# \uD3EC\uD2B8\uC6D0(PortOne) \uACB0\uC81C API \uC124\uC815
# \uC0C1\uC810 UID(\uB9AC\uC561\uD2B8 \uD658\uACBD\uC124\uC815 \uD30C\uC77C\uC77C .env\uC5D0 \uC124\uC815\uB418\uC5B4 \uC788\uC74C)
portone.merchant-uid=imp66331315
# \uD3EC\uD2B8\uC6D0 \uACB0\uC81C REST API URL
portone.api-key=3200443332113774
# \uD3EC\uD2B8\uC6D0 \uACB0\uC81C API\uB97C \uC0AC\uC6A9\uD558\uAE30 \uC704\uD55C API \uBE44\uBC00\uD0A4
portone.api-secret=zH3hT3ZudlagOhf0hkMhr8tozPHtPWZ6TBWQ7Icp8ntuU9gJFROSyPob4wzoOkLVhtECILPfHggRVldO

# \uC5B4\uD50C\uB9AC\uCF00\uC774\uC158\uC758 url \uC694\uCCAD\uACFC \uB9E4\uD551\uB418\uC5B4 \uC788\uB294 \uD578\uB4E4\uB7EC \uC815\uBCF4 display
logging.level.com.javalab.student=DEBUG

# CORS \uC124\uC815
spring.mvc.cors.allowed-origins=http://localhost:3000
spring.mvc.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS,PATCH
spring.mvc.cors.allowed-headers=*
spring.mvc.cors.allow-credentials=true






